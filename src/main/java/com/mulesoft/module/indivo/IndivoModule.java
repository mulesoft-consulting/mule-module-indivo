/**
 * Mule Development Kit
 * Copyright 2010-2011 (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package com.mulesoft.module.indivo;

import org.mule.api.annotations.*;
import org.mule.api.annotations.oauth.*;
import org.mule.api.annotations.param.*;

import com.sun.jersey.api.client.*;
import com.sun.jersey.api.client.config.*;
import com.sun.jersey.api.client.filter.*;
import com.sun.jersey.api.representation.Form;
import com.sun.jersey.core.header.FormDataContentDisposition;
import com.sun.jersey.multipart.*;
import com.sun.jersey.multipart.impl.*;
import com.sun.jersey.oauth.client.OAuthClientFilter;
import com.sun.jersey.oauth.signature.HMAC_SHA1;
import com.sun.jersey.oauth.signature.OAuthParameters;
import com.sun.jersey.oauth.signature.OAuthSecrets;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;

import java.io.*;
import java.util.*;

import org.mule.api.lifecycle.InitialisationException;
import org.mule.api.ConnectionException;
import org.mule.util.StringUtils;

import javax.ws.rs.core.MediaType;
/**
 * Cloud Connector
 *
 * @author MuleSoft, Inc.
 */
@Module(name="indivo", schemaVersion="3.3.0")
@OAuth(requestTokenUrl = "http://sandbox.indivohealth.org:8000/oauth/request_token",
       accessTokenUrl = "http://sandbox.indivohealth.org:8000/oauth/access_token",
       authorizationUrl = "http://sandbox.indivohealth.org/oauth/authorize",
       verifierRegex = "oauth_token=([^&]+)")
public class IndivoModule
{
    /**
     * URL of the Indivo server API
     */
    @Configurable
    private String server;
    
    /**
     * Indivo server port 
     */
    @Configurable
    @Optional
    @Default("80")
    private int port;
    
    /**
     * Application key
     */
    @Configurable
    @OAuthConsumerKey
    private String appKey;
    
    /**
     * Application secret
     */
    @Configurable
    @OAuthConsumerSecret
    private String appSecret;
    
    /**
    * debug mode
    */
    @Configurable
    @Optional
    @Default("false")
    private boolean debug;

    private Client client;
    
    /**
     * Create a new account, and send out initialization emails
     *
     * {@sample.xml ../../../doc/Indivo-connector.xml.sample indivo:account-create}
     *
     * @param accessToken accessToken
     * @param accessTokenSecret access token secret
     * @param primarySecret Does this account require a primary secret?
     * @param secondarySecret Does this account require a secondary secret?
	 * @param contactEmail A valid email at which to reach the account holder. If empty, accountId will be used.
     * @param accountId An identifier for the new account. Must be a valid email address. REQUIRED
     * @param fullName The full name to associate with the account.
     * 
     * @return information about the new account on success
     */
    @Processor
    public String accountCreate(@OAuthAccessToken String accessToken,
                                @OAuthAccessTokenSecret String accessTokenSecret,
                                @Optional @Default("false") boolean primarySecret,
                                @Optional @Default("false") boolean secondarySecret,
                                @Optional String contactEmail,
                                String accountId,
                                @Optional @Default("") String fullName) throws Exception
    {        
        final String apiUrl = getApiUrl("accounts/");

        WebResource r = getClient().resource(apiUrl);
        r.accept(MediaType.APPLICATION_XML_TYPE).type(MediaType.APPLICATION_FORM_URLENCODED_TYPE);

        /*
	  		Formdata Parameters:
			 	
			primary_secret_p Ð 0 or 1: Does this account require a primary secret?
			secondary_secret_p Ð 0 or 1: Does this account require a secondary secret?
			contact_email Ð A valid email at which to reach the account holder.
			account_id Ð An identifier for the new account. Must be a valid email address. REQUIRED
			full_name Ð The full name to associate with the account.
		 */
        r = r.queryParam("primary_secret_p", primarySecret ? "1" : "0")
        	 .queryParam("secondary_secret_p", secondarySecret ? "1" : "0")
        	 .queryParam("contact_email", StringUtils.isEmpty(contactEmail) ? accountId : contactEmail)
        	 .queryParam("account_id", accountId)
        	 .queryParam("full_name", fullName);

        if (isDebug())
        {
            r.addFilter(new LoggingFilter());
        }
        r.addFilter(getOAuthClientFilter(accessToken, accessTokenSecret));

    	String response = r.post(String.class);
    	return response;
    }

    
    /**
     * Search for accounts by name or email.
     *
     * {@sample.xml ../../../doc/Indivo-connector.xml.sample indivo:account-search}
     *
     * @param accessToken accessToken
     * @param accessTokenSecret access token secret
     * @param contactEmail The full name of the account to search for
     * @param fullName The contact email of the account to search for
     * 
     * @return information about matching accounts
     */
    @Processor
    public InputStream accountSearch(@OAuthAccessToken String accessToken,
                                     @OAuthAccessTokenSecret String accessTokenSecret,
                                     @Optional @Default("") String contactEmail,
                                     @Optional @Default("") String fullName) throws Exception
    {
        final String apiUrl = getApiUrl("accounts/search");

        WebResource r = getClient().resource(apiUrl);

        /*
          Query Parameters:
 	
 		  fullname Ð The full name of the account to search for
          contact_email Ð The contact email of the account to search for
         */
        r = r.queryParam("fullname", fullName)
             .queryParam("contact_email", contactEmail);
        
        if (isDebug())
        {
            r.addFilter(new LoggingFilter());
        }
        
        r.addFilter(getOAuthClientFilter(accessToken, accessTokenSecret));

        InputStream response = r.get(InputStream.class);
        
        return response;
    }
    
    /**
     * Display information about an account.
     *
     * {@sample.xml ../../../doc/Indivo-connector.xml.sample indivo:account-info}
     *
     * @param accessToken accessToken
     * @param accessTokenSecret access token secret
     * @param accountId The email identifier of the Indivo account. REQUIRED     
     *  
     * @return information about the account
     */
    @Processor
    public InputStream accountInfo(@OAuthAccessToken String accessToken,
                                   @OAuthAccessTokenSecret String accessTokenSecret,
                                   String accountId) throws Exception
    {
        final String apiUrl = getApiUrl("accounts/" + accountId);

        WebResource r = getClient().resource(apiUrl);

        if (isDebug())
        {
            r.addFilter(new LoggingFilter());
        }
        
        r.addFilter(getOAuthClientFilter(accessToken, accessTokenSecret));

        InputStream response = r.get(InputStream.class);
        
        return response;
    }

    /**
     * Get oAuth credentials for an app to run in Connect or SMART REST mode.
     *
     * {@sample.xml ../../../doc/Indivo-connector.xml.sample indivo:get-connect-credentials}
     *
     * @param accessToken accessToken
     * @param accessTokenSecret access token secret
     * @param accountId  The email identifier of the Indivo account to authorize the connect credentials
     * @param phaId The email identifier of the Indivo user app to grant access via the connect credentials
     * @param recordId The identifier of the Indivo Record to which to grant access via the connect credentials
     * 
     * @return set of credentials providing access for the app to the record, via Connect-Style Authentication and via Standard oAuth authentication. 
     *         Additionally, the credentials include a precalculated oAuth Header that the app can use to access the record.
     */
    @Processor
    public String getConnectCredentials(@OAuthAccessToken String accessToken,
                                        @OAuthAccessTokenSecret String accessTokenSecret,
                                        String accountId,
    									String phaId,
    									String recordId) throws Exception
    {
        final String apiUrl = getApiUrl("accounts/" + accountId + "/apps/" + phaId + "/connect_credentials");

        WebResource r = getClient().resource(apiUrl);
        r.accept(MediaType.APPLICATION_XML_TYPE).type(MediaType.APPLICATION_FORM_URLENCODED_TYPE);

        /*
	  		Formdata Parameters:
			 	
			record_id Ð The identifier of the Indivo Record to which to grant access via the connect credentials
		 */
        r = r.queryParam("record_id", recordId);

        if (isDebug())
        {
            r.addFilter(new LoggingFilter());
        }
        r.addFilter(getOAuthClientFilter(accessToken, accessTokenSecret));

    	String response = r.post(String.class);
    	return response;

    }

    /**
     * Delete all app-specific User Preferences for an account.
     *
     * {@sample.xml ../../../doc/Indivo-connector.xml.sample indivo:delete-user-preferences}
     *
     * @param accessToken accessToken
     * @param accessTokenSecret access token secret
     * @param accountId The email identifier of the Indivo account
     * @param phaId The email identifier of the Indivo user app
     * 
     * @return <ok/> if successful
     */
    @Processor
    public String deleteUserPreferences(@OAuthAccessToken String accessToken,
 				                        @OAuthAccessTokenSecret String accessTokenSecret,
				                        String accountId,
				                        String phaId) throws Exception
    {
    	final String apiUrl = getApiUrl("accounts/" + accountId + "/apps/" + phaId + "/preferences");

        WebResource r = getClient().resource(apiUrl);

        if (isDebug())
        {
            r.addFilter(new LoggingFilter());
        }
        r.addFilter(getOAuthClientFilter(accessToken, accessTokenSecret));

        String response = r.delete(String.class);
        /*
        final JSONObject root = (JSONObject) JSONValue.parse(response);
        final JSONArray files = (JSONArray) root.get("contents");
        List<String> paths = new ArrayList<String>(files.size());
        for (int i = 0; i < files.size(); i++)
        {
            JSONObject file = (JSONObject) files.get(i);
            paths.add(file.get("path").toString());
        }
        */
        return response;
    }

    /**
     * Get app-specific User Preferences for an account.
     *
     * {@sample.xml ../../../doc/Indivo-connector.xml.sample indivo:get-user-preferences}
     *
     * @param accessToken accessToken
     * @param accessTokenSecret access token secret
     * @param accountId The email identifier of the Indivo account
     * @param phaId The email identifier of the Indivo user app
     * 
     * @return app-specific user preferences. Preferences format is defined by the app setting the preferences, and will therefore vary.
     */
    @Processor
    public InputStream getUserPreferences(@OAuthAccessToken String accessToken,
			                              @OAuthAccessTokenSecret String accessTokenSecret,
			                              String accountId,
			                              String phaId) throws Exception
    {
    	final String apiUrl = getApiUrl("accounts/" + accountId + "/apps/" + phaId + "/preferences");

        WebResource r = getClient().resource(apiUrl);

        if (isDebug())
        {
            r.addFilter(new LoggingFilter());
        }
        r.addFilter(getOAuthClientFilter(accessToken, accessTokenSecret));

        InputStream response = r.get(InputStream.class);

        return response;
    }

    /**
     * Set app-specific User Preferences for an account.
     *
     * {@sample.xml ../../../doc/Indivo-connector.xml.sample indivo:set-user-preferences}
     *
     * @param accessToken accessToken
     * @param accessTokenSecret access token secret
     * @param accountId The email identifier of the Indivo account
     * @param phaId The email identifier of the Indivo user app
     * 
     * @return <ok/> if successful
     */
    @Processor
    public String setUserPreferences(@OAuthAccessToken String accessToken,
			                              @OAuthAccessTokenSecret String accessTokenSecret,
			                              String accountId,
			                              String phaId) throws Exception
    {
    	final String apiUrl = getApiUrl("accounts/" + accountId + "/apps/" + phaId + "/preferences");

        WebResource r = getClient().resource(apiUrl);

        if (isDebug())
        {
            r.addFilter(new LoggingFilter());
        }
        r.addFilter(getOAuthClientFilter(accessToken, accessTokenSecret));

        String response = r.put(String.class);

        return response;
    }

    //======================================
    /**
     * SMART-compatible alias for the generic list view: returns data_models serialized as SMART RDF.
     *
     * {@sample.xml ../../../doc/Indivo-connector.xml.sample indivo:smart-generic}
     *
     * @param accessToken accessToken
     * @param accessTokenSecret access token secret
     * @param recordId The id string associated with the Indivo record
     * @param modelName The name of the SMART data_model to retrieve (i.e. problems). Options are defined by the SMART API.
     * 
     * @return SMART RDF/XML for all items matching MODEL_NAME belonging to the record.
     */
    @Processor
    public InputStream smartGeneric(@OAuthAccessToken String accessToken,
			                              @OAuthAccessTokenSecret String accessTokenSecret,
			                              String recordId,
			                              String modelName) throws Exception
    {
    	final String apiUrl = getApiUrl("records/" + recordId + "/" + modelName);

        WebResource r = getClient().resource(apiUrl);

        if (isDebug())
        {
            r.addFilter(new LoggingFilter());
        }
        r.addFilter(getOAuthClientFilter(accessToken, accessTokenSecret));

        InputStream response = r.get(InputStream.class);

        return response;
    }
    
    
    //--------------------------------------
    
    public String getServer()
    {
        return server;
    }

    public void setServer(String server)
    {
        this.server = server;
    }

    public int getPort()
    {
        return port;
    }

    public void setPort(int port)
    {
        this.port = port;
    }

    public String getAppKey()
    {
        return appKey;
    }

    public void setAppKey(String appKey)
    {
        this.appKey = appKey;
    }

    public String getAppSecret()
    {
        return appSecret;
    }

    public void setAppSecret(String appSecret)
    {
        this.appSecret = appSecret;
    }
    
    public boolean isDebug()
    {
        return debug;
    }

    public void setDebug(boolean debug)
    {
        this.debug = debug;
    }

    //--------------------------------------------------
    /**
     * @param path path without leading /
     */
    protected String getApiUrl(String path)
    {
        return String.format("%s://%s/%s", "https", getServer(), path);
    }
    
    protected Client getClient() {
        if (client == null) {
            ClientConfig cc = new DefaultClientConfig();
            cc.getClasses().add(MultiPartWriter.class);//TODO - is this requred?
            client = Client.create(cc); 
        }
        return client;
    }
    
    protected OAuthClientFilter getOAuthClientFilter(String accessToken, String accessTokenSecret) {
        OAuthParameters params = new OAuthParameters()
                .signatureMethod(HMAC_SHA1.NAME)
                .consumerKey(getAppKey())
                .token(accessToken).version();

        OAuthSecrets secrets = new OAuthSecrets()
                .consumerSecret(getAppSecret())
                .tokenSecret(accessTokenSecret);

        OAuthClientFilter filter = new OAuthClientFilter(
                getClient().getProviders(),
                params,
                secrets
        );        
        
        return filter;
    }
}
